//
//  SmithSettings.swift
//  Smith - Your AI Coding Craftsman
//
//  Created by Yousef Jawdat on 15/06/2025.
//

import SwiftUI
import Foundation
import Combine

@MainActor
class SmithSettings: ObservableObject {
    static let shared = SmithSettings()
    
    private let userDefaults = UserDefaults.standard
    
    // MARK: - General Settings
    @Published var launchAtLogin: Bool {
        didSet { userDefaults.set(launchAtLogin, forKey: "launchAtLogin") }
    }
    
    @Published var showMenuBarIcon: Bool {
        didSet { userDefaults.set(showMenuBarIcon, forKey: "showMenuBarIcon") }
    }
    
    @Published var startMinimized: Bool {
        didSet { userDefaults.set(startMinimized, forKey: "startMinimized") }
    }
    
    @Published var defaultWindowSize: WindowSize {
        didSet { userDefaults.set(defaultWindowSize.rawValue, forKey: "defaultWindowSize") }
    }
    
    @Published var showNotifications: Bool {
        didSet { userDefaults.set(showNotifications, forKey: "showNotifications") }
    }
    
    @Published var soundEffects: Bool {
        didSet { userDefaults.set(soundEffects, forKey: "soundEffects") }
    }
    
    @Published var notifyOnSuggestions: Bool {
        didSet { userDefaults.set(notifyOnSuggestions, forKey: "notifyOnSuggestions") }
    }
    
    @Published var fileMonitoringInterval: Double {
        didSet { userDefaults.set(fileMonitoringInterval, forKey: "fileMonitoringInterval") }
    }
    
    @Published var maxFileSize: Int {
        didSet { userDefaults.set(maxFileSize, forKey: "maxFileSize") }
    }
    
    // MARK: - AI Settings
    @Published var useFoundationModels: Bool {
        didSet { userDefaults.set(useFoundationModels, forKey: "useFoundationModels") }
    }
    
    @Published var streamingResponses: Bool {
        didSet { userDefaults.set(streamingResponses, forKey: "streamingResponses") }
    }
    
    @Published var responseStyle: ResponseStyle {
        didSet { userDefaults.set(responseStyle.rawValue, forKey: "responseStyle") }
    }
    
    @Published var codeExplanationLevel: ExplanationLevel {
        didSet { userDefaults.set(codeExplanationLevel.rawValue, forKey: "codeExplanationLevel") }
    }
    
    @Published var includeCodeExamples: Bool {
        didSet { userDefaults.set(includeCodeExamples, forKey: "includeCodeExamples") }
    }
    
    @Published var suggestBestPractices: Bool {
        didSet { userDefaults.set(suggestBestPractices, forKey: "suggestBestPractices") }
    }
    
    @Published var autoApplySafeSuggestions: Bool {
        didSet { userDefaults.set(autoApplySafeSuggestions, forKey: "autoApplySafeSuggestions") }
    }
    
    @Published var autoGenerateDocumentation: Bool {
        didSet { userDefaults.set(autoGenerateDocumentation, forKey: "autoGenerateDocumentation") }
    }
    
    @Published var autoDetectCodeIssues: Bool {
        didSet { userDefaults.set(autoDetectCodeIssues, forKey: "autoDetectCodeIssues") }
    }
    
    // MARK: - Xcode Settings
    @Published var monitorXcodeFiles: Bool {
        didSet { userDefaults.set(monitorXcodeFiles, forKey: "monitorXcodeFiles") }
    }
    
    @Published var autoDetectProjectChanges: Bool {
        didSet { userDefaults.set(autoDetectProjectChanges, forKey: "autoDetectProjectChanges") }
    }
    
    @Published var enableFileIndexing: Bool {
        didSet { userDefaults.set(enableFileIndexing, forKey: "enableFileIndexing") }
    }
    
    @Published var indexOnProjectOpen: Bool {
        didSet { userDefaults.set(indexOnProjectOpen, forKey: "indexOnProjectOpen") }
    }
    
    @Published var indexUpdateFrequency: IndexFrequency {
        didSet { userDefaults.set(indexUpdateFrequency.rawValue, forKey: "indexUpdateFrequency") }
    }
    
    @Published var insertCodeAtCursor: Bool {
        didSet { userDefaults.set(insertCodeAtCursor, forKey: "insertCodeAtCursor") }
    }
    
    @Published var openFilesInXcode: Bool {
        didSet { userDefaults.set(openFilesInXcode, forKey: "openFilesInXcode") }
    }
    
    @Published var buildProjectShortcuts: Bool {
        didSet { userDefaults.set(buildProjectShortcuts, forKey: "buildProjectShortcuts") }
    }
    
    // MARK: - Appearance Settings
    @Published var colorScheme: AppColorScheme {
        didSet { userDefaults.set(colorScheme.rawValue, forKey: "colorScheme") }
    }
    
    @Published var accentColor: AccentColor {
        didSet { userDefaults.set(accentColor.rawValue, forKey: "accentColor") }
    }
    
    @Published var interfaceFontSize: FontSize {
        didSet { userDefaults.set(interfaceFontSize.rawValue, forKey: "interfaceFontSize") }
    }
    
    @Published var codeFont: CodeFont {
        didSet { userDefaults.set(codeFont.rawValue, forKey: "codeFont") }
    }
    
    @Published var useLigatures: Bool {
        didSet { userDefaults.set(useLigatures, forKey: "useLigatures") }
    }
    
    @Published var useVibrancy: Bool {
        didSet { userDefaults.set(useVibrancy, forKey: "useVibrancy") }
    }
    
    @Published var animateTransitions: Bool {
        didSet { userDefaults.set(animateTransitions, forKey: "animateTransitions") }
    }
    
    @Published var showSyntaxHighlighting: Bool {
        didSet { userDefaults.set(showSyntaxHighlighting, forKey: "showSyntaxHighlighting") }
    }
    
    // MARK: - Advanced Settings
    @Published var enableDebugLogging: Bool {
        didSet { userDefaults.set(enableDebugLogging, forKey: "enableDebugLogging") }
    }
    
    @Published var showPerformanceMetrics: Bool {
        didSet { userDefaults.set(showPerformanceMetrics, forKey: "showPerformanceMetrics") }
    }
    
    @Published var logAppleScriptCalls: Bool {
        didSet { userDefaults.set(logAppleScriptCalls, forKey: "logAppleScriptCalls") }
    }
    
    // MARK: - Computed Properties
    var foundationModelsStatus: String {
        if isFoundationModelsAvailable {
            return "Available and Ready"
        } else {
            return "Not Available - Enable Apple Intelligence in System Settings"
        }
    }
    
    var isFoundationModelsAvailable: Bool {
        // This would be determined by checking Apple Intelligence availability
        // For now, we'll simulate it
        return true
    }
    
    var supportedFileTypes: [String] {
        return ["swift", "m", "mm", "h", "hpp", "cpp", "c"]
    }
    
    private init() {
        // Initialize with default values
        self.launchAtLogin = userDefaults.bool(forKey: "launchAtLogin")
        self.showMenuBarIcon = userDefaults.object(forKey: "showMenuBarIcon") as? Bool ?? true
        self.startMinimized = userDefaults.bool(forKey: "startMinimized")
        self.defaultWindowSize = WindowSize(rawValue: userDefaults.string(forKey: "defaultWindowSize") ?? "medium") ?? .medium
        self.showNotifications = userDefaults.object(forKey: "showNotifications") as? Bool ?? true
        self.soundEffects = userDefaults.object(forKey: "soundEffects") as? Bool ?? true
        self.notifyOnSuggestions = userDefaults.object(forKey: "notifyOnSuggestions") as? Bool ?? true
        self.fileMonitoringInterval = userDefaults.object(forKey: "fileMonitoringInterval") as? Double ?? 2.0
        self.maxFileSize = userDefaults.object(forKey: "maxFileSize") as? Int ?? 2_000_000
        
        // AI Settings
        self.useFoundationModels = userDefaults.object(forKey: "useFoundationModels") as? Bool ?? true
        self.streamingResponses = userDefaults.object(forKey: "streamingResponses") as? Bool ?? true
        self.responseStyle = ResponseStyle(rawValue: userDefaults.string(forKey: "responseStyle") ?? "conversational") ?? .conversational
        self.codeExplanationLevel = ExplanationLevel(rawValue: userDefaults.string(forKey: "codeExplanationLevel") ?? "intermediate") ?? .intermediate
        self.includeCodeExamples = userDefaults.object(forKey: "includeCodeExamples") as? Bool ?? true
        self.suggestBestPractices = userDefaults.object(forKey: "suggestBestPractices") as? Bool ?? true
        self.autoApplySafeSuggestions = userDefaults.bool(forKey: "autoApplySafeSuggestions")
        self.autoGenerateDocumentation = userDefaults.bool(forKey: "autoGenerateDocumentation")
        self.autoDetectCodeIssues = userDefaults.object(forKey: "autoDetectCodeIssues") as? Bool ?? true
        
        // Xcode Settings
        self.monitorXcodeFiles = userDefaults.object(forKey: "monitorXcodeFiles") as? Bool ?? true
        self.autoDetectProjectChanges = userDefaults.object(forKey: "autoDetectProjectChanges") as? Bool ?? true
        self.enableFileIndexing = userDefaults.object(forKey: "enableFileIndexing") as? Bool ?? true
        self.indexOnProjectOpen = userDefaults.object(forKey: "indexOnProjectOpen") as? Bool ?? true
        self.indexUpdateFrequency = IndexFrequency(rawValue: userDefaults.string(forKey: "indexUpdateFrequency") ?? "realtime") ?? .realtime
        self.insertCodeAtCursor = userDefaults.object(forKey: "insertCodeAtCursor") as? Bool ?? true
        self.openFilesInXcode = userDefaults.object(forKey: "openFilesInXcode") as? Bool ?? true
        self.buildProjectShortcuts = userDefaults.object(forKey: "buildProjectShortcuts") as? Bool ?? true
        
        // Appearance Settings
        self.colorScheme = AppColorScheme(rawValue: userDefaults.string(forKey: "colorScheme") ?? "system") ?? .system
        self.accentColor = AccentColor(rawValue: userDefaults.string(forKey: "accentColor") ?? "blue") ?? .blue
        self.interfaceFontSize = FontSize(rawValue: userDefaults.string(forKey: "interfaceFontSize") ?? "medium") ?? .medium
        self.codeFont = CodeFont(rawValue: userDefaults.string(forKey: "codeFont") ?? "sfMono") ?? .sfMono
        self.useLigatures = userDefaults.object(forKey: "useLigatures") as? Bool ?? true
        self.useVibrancy = userDefaults.object(forKey: "useVibrancy") as? Bool ?? true
        self.animateTransitions = userDefaults.object(forKey: "animateTransitions") as? Bool ?? true
        self.showSyntaxHighlighting = userDefaults.object(forKey: "showSyntaxHighlighting") as? Bool ?? true
        
        // Advanced Settings
        self.enableDebugLogging = userDefaults.bool(forKey: "enableDebugLogging")
        self.showPerformanceMetrics = userDefaults.bool(forKey: "showPerformanceMetrics")
        self.logAppleScriptCalls = userDefaults.bool(forKey: "logAppleScriptCalls")
    }
    
    // MARK: - Methods
    func clearCache() {
        // Implementation to clear cache
        print("🗑️ Cache cleared")
    }
    
    func exportSettings() {
        // Implementation to export settings
        print("📤 Settings exported")
    }
    
    func importSettings() {
        // Implementation to import settings
        print("📥 Settings imported")
    }
    
    func resetAllSettings() {
        // Reset all settings to defaults
        let defaults = UserDefaults.standard
        let keys = [
            "launchAtLogin", "showMenuBarIcon", "startMinimized", "defaultWindowSize",
            "showNotifications", "soundEffects", "notifyOnSuggestions", "fileMonitoringInterval", "maxFileSize",
            "useFoundationModels", "streamingResponses", "responseStyle", "codeExplanationLevel",
            "includeCodeExamples", "suggestBestPractices", "autoApplySafeSuggestions", "autoGenerateDocumentation", "autoDetectCodeIssues",
            "monitorXcodeFiles", "autoDetectProjectChanges", "enableFileIndexing", "indexOnProjectOpen", "indexUpdateFrequency",
            "insertCodeAtCursor", "openFilesInXcode", "buildProjectShortcuts",
            "colorScheme", "accentColor", "interfaceFontSize", "codeFont", "useLigatures", "useVibrancy", "animateTransitions", "showSyntaxHighlighting",
            "enableDebugLogging", "showPerformanceMetrics", "logAppleScriptCalls"
        ]
        
        for key in keys {
            defaults.removeObject(forKey: key)
        }
        
        // Reinitialize with default values
        objectWillChange.send()
        print("🔄 All settings reset to defaults")
    }
}

// MARK: - Enums
enum WindowSize: String, CaseIterable {
    case small = "small"
    case medium = "medium"
    case large = "large"
    
    var dimensions: (width: CGFloat, height: CGFloat) {
        switch self {
        case .small: return (600, 400)
        case .medium: return (800, 600)
        case .large: return (1200, 800)
        }
    }
}

enum ResponseStyle: String, CaseIterable {
    case concise = "concise"
    case detailed = "detailed"
    case conversational = "conversational"
}

enum ExplanationLevel: String, CaseIterable {
    case beginner = "beginner"
    case intermediate = "intermediate"
    case advanced = "advanced"
}

enum IndexFrequency: String, CaseIterable {
    case realtime = "realtime"
    case fiveMinutes = "fiveMinutes"
    case fifteenMinutes = "fifteenMinutes"
    case manual = "manual"
}

enum AppColorScheme: String, CaseIterable {
    case system = "system"
    case light = "light"
    case dark = "dark"
}

enum AccentColor: String, CaseIterable {
    case blue = "blue"
    case purple = "purple"
    case pink = "pink"
    case red = "red"
    case orange = "orange"
    case yellow = "yellow"
    case green = "green"
    case mint = "mint"
    case teal = "teal"
    case cyan = "cyan"
    
    var color: Color {
        switch self {
        case .blue: return .blue
        case .purple: return .purple
        case .pink: return .pink
        case .red: return .red
        case .orange: return .orange
        case .yellow: return .yellow
        case .green: return .green
        case .mint: return .mint
        case .teal: return .teal
        case .cyan: return .cyan
        }
    }
}

enum FontSize: String, CaseIterable {
    case small = "small"
    case medium = "medium"
    case large = "large"
    
    var scale: CGFloat {
        switch self {
        case .small: return 0.9
        case .medium: return 1.0
        case .large: return 1.1
        }
    }
}

enum CodeFont: String, CaseIterable {
    case sfMono = "sfMono"
    case menlo = "menlo"
    case monaco = "monaco"
    case firaCode = "firaCode"
    
    var fontName: String {
        switch self {
        case .sfMono: return "SF Mono"
        case .menlo: return "Menlo"
        case .monaco: return "Monaco"
        case .firaCode: return "Fira Code"
        }
    }
}
